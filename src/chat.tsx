import { useEffect, useState } from "react";
import { Action, ActionPanel, List, showToast, Toast } from "@raycast/api";
import { generateResponse } from "./api/huggingface";
import { useConversations } from "./hooks/useConversations";
import { useQuestions } from "./hooks/useQuestions";
import { v4 as uuidv4 } from "uuid";
import { Question } from "./types/question";

export default function Chat() {
  const [searchQuestion, setSearchQuestion] = useState<Question>({
    id: uuidv4(),
    conversation_id: uuidv4(), // conversation will be generated by the question (TODO: maybe this will change)
    prompt: "",
    response: "",
    created_at: new Date().toISOString(),
  });
  const [output, setOutput] = useState<string>("");
  const [selectedQuestionId, setSelectedQuestionId] = useState<string | null>(null);
  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);

  const { data: conversatons, add: addConversation } = useConversations();
  const { data: questions, isLoading: isLoadingQuestions, add: addQuestion } = useQuestions();

  // TODO: don't create conversation until a question is asked
  // useEffect(() => {
  //   const handleAddConversation = async () => {
  //     try {
  //       const newConversation = { id: uuidv4(), title: "Untitled Conversation", created_at: new Date().toISOString() };
  //       await addConversation(newConversation);
  //       console.log("Conversation added successfully!");
  //     } catch (error) {
  //       console.error("Error adding conversation:", error);
  //     }
  //   };

  //   // handleAddConversation();
  // }, []);

  const handleAskQuestion = async (question: Question) => {
    if (!question.prompt) {
      // impossible with ActionsPanel conditions (I hope at least)
      showToast({
        style: Toast.Style.Failure,
        title: "Question cannot be empty",
      });
      return;
    }

    setOutput("");
    setSearchQuestion(question);
    setSelectedQuestionId(question.id);

    showToast({
      style: Toast.Style.Animated,
      title: "Asking question...",
    });

    try {
      const response = await generateResponse(question.prompt, setOutput);
      if (response) {
        await addQuestion({ ...question, response });
        showToast({
          style: Toast.Style.Success,
          title: "Response complete!",
        });
      } else {
        console.error("Stream issue perhaps?");
      }

      // Create a new FRESH question (with same conversation id)
      setSearchQuestion((prevQuestion) => ({
        id: uuidv4(),
        conversation_id: prevQuestion.conversation_id,
        prompt: "",
        response: "",
        created_at: new Date().toISOString(),
      }));
    } catch (error) {
      console.error("Error generating response:", error);
      showToast({
        style: Toast.Style.Failure,
        title: "Error",
        message: "Failed to generate response. Please try again.",
      });
    }
  };

  return (
    <List
      isShowingDetail={true}
      onSearchTextChange={(prompt) => {
        setSearchQuestion((prevQuestion) => ({ ...prevQuestion, prompt }));
      }}
      searchBarPlaceholder="Search or ask a question..."
      actions={
        searchQuestion.prompt ? (
          <ActionPanel>
            <Action title="Ask Question" onAction={() => handleAskQuestion(searchQuestion)} />
          </ActionPanel>
        ) : null
      }
      selectedItemId={selectedQuestionId ?? undefined}
    >
      {questions.map((question) => (
        <List.Item
          key={question.id}
          title={question.prompt}
          detail={<List.Item.Detail markdown={output ?? "Select a question to see the response."} />}
          actions={
            searchQuestion ? (
              <ActionPanel>
                <Action title="Ask Question" onAction={() => handleAskQuestion(searchQuestion)} />
              </ActionPanel>
            ) : null
          }
        />
      ))}
    </List>
  );
}
